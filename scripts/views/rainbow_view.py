# Cody Tolene
# Apache License 2.0
#
# Contains code from here under the MIT License:
# https://github.com/pimoroni/pimoroni-pico/tree/main/micropython/examples/galactic_unicorn

import uasyncio
import math
from picographics import PicoGraphics, DISPLAY_GALACTIC_UNICORN as DISPLAY
from galactic import GalacticUnicorn, Channel


class Rainbow:
    def __init__(self, galacticUnicorn, graphics, sound):
        self.galacticUnicorn = galacticUnicorn
        self.graphics = graphics
        self.height = galacticUnicorn.HEIGHT
        self.hue_offset = 0.0
        self.sound = sound
        self.phase = 0
        self.speed = 1.0
        self.stripe_width = 3.0
        self.width = galacticUnicorn.WIDTH

        self.hue_map = [
            self.from_hsv(x / self.width, 1.0, 1.0) for x in range(self.width)
        ]
        self.play_music()

    def play_music(self):
        music_notes = [melody_notes, rhythm_notes, drum_beats, hi_hat, bass_notes]
        channels = [
            self.galacticUnicorn.synth_channel(i) for i in range(len(music_notes))
        ]
        channels[0].configure(
            waveforms=Channel.TRIANGLE + Channel.SQUARE,
            attack=0.016,
            decay=0.168,
            sustain=0xAFFF / 65535,
            release=0.168,
            volume=self.sound.get_current_volume(),
        )
        channels[1].configure(
            waveforms=Channel.SINE + Channel.SQUARE,
            attack=0.038,
            decay=0.300,
            sustain=0,
            release=0,
            volume=self.sound.get_current_volume(),
        )
        channels[2].configure(
            waveforms=Channel.NOISE,
            attack=0.005,
            decay=0.010,
            sustain=16000 / 65535,
            release=0.100,
            volume=self.sound.get_current_volume(),
        )
        channels[3].configure(
            waveforms=Channel.NOISE,
            attack=0.005,
            decay=0.005,
            sustain=8000 / 65535,
            release=0.040,
            volume=self.sound.get_current_volume(),
        )
        channels[4].configure(
            waveforms=Channel.SQUARE,
            attack=0.010,
            decay=0.100,
            sustain=0,
            release=0.500,
            volume=self.sound.get_current_volume(),
        )
        self.sound.play_notes(music_notes, channels, bpm=700, repeat=True)

    @staticmethod
    def from_hsv(h, s, v):
        i = math.floor(h * 6.0)
        f = h * 6.0 - i
        v *= 255.0
        p = v * (1.0 - s)
        q = v * (1.0 - f * s)
        t = v * (1.0 - (1.0 - f) * s)

        i = int(i) % 6
        if i == 0:
            return int(v), int(t), int(p)
        if i == 1:
            return int(q), int(v), int(p)
        if i == 2:
            return int(p), int(v), int(t)
        if i == 3:
            return int(p), int(q), int(v)
        if i == 4:
            return int(t), int(p), int(v)
        if i == 5:
            return int(v), int(p), int(q)

    def draw(self):
        phase_percent = self.phase / 15

        for x in range(self.width):
            colour = self.hue_map[
                int((x + (self.hue_offset * self.width)) % self.width)
            ]
            for y in range(self.height):
                v = (math.sin((x + y) / self.stripe_width + phase_percent) + 1.5) / 2.5
                self.graphics.set_pen(
                    self.graphics.create_pen(
                        int(colour[0] * v), int(colour[1] * v), int(colour[2] * v)
                    )
                )
                self.graphics.pixel(x, y)

        self.galacticUnicorn.update(self.graphics)

    def on_button_press(self):
        if self.galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_C):
            self.stripe_width += 0.05
            self.stripe_width = 10.0 if self.stripe_width > 10.0 else self.stripe_width
            # self.hue_offset += 0.01
            # self.hue_offset = 1.0 if self.hue_offset > 1.0 else self.hue_offset

        if self.galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_D):
            self.stripe_width -= 0.05
            self.stripe_width = 1.0 if self.stripe_width < 1.0 else self.stripe_width
            # self.hue_offset -= 0.01
            # self.hue_offset = 0.0 if self.hue_offset < 0.0 else self.hue_offset

    async def update(self):
        self.phase += self.speed
        self.graphics.set_pen(0)
        self.graphics.clear()
        self.draw()
        self.on_button_press()


async def run(galacticUnicorn, graphics, sound):
    rainbow = Rainbow(galacticUnicorn, graphics, sound)

    while True:
        await rainbow.update()
        await uasyncio.sleep(0.1)


melody_notes = [
    147,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    175,
    0,
    196,
    0,
    220,
    0,
    262,
    0,
    247,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    175,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    175,
    0,
    196,
    0,
    220,
    0,
    262,
    0,
    330,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    349,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    349,
    0,
    330,
    0,
    294,
    0,
    220,
    0,
    262,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    247,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    247,
    0,
    220,
    0,
    196,
    0,
    147,
    0,
    175,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
]
rhythm_notes = [
    294,
    0,
    440,
    0,
    587,
    0,
    440,
    0,
    294,
    0,
    440,
    0,
    587,
    0,
    440,
    0,
    294,
    0,
    440,
    0,
    587,
    0,
    440,
    0,
    294,
    0,
    440,
    0,
    587,
    0,
    440,
    0,
    294,
    0,
    440,
    0,
    587,
    0,
    440,
    0,
    294,
    0,
    440,
    0,
    587,
    0,
    440,
    0,
    392,
    0,
    523,
    0,
    659,
    0,
    523,
    0,
    392,
    0,
    523,
    0,
    659,
    0,
    523,
    0,
    698,
    0,
    587,
    0,
    440,
    0,
    587,
    0,
    698,
    0,
    587,
    0,
    440,
    0,
    587,
    0,
    523,
    0,
    440,
    0,
    330,
    0,
    440,
    0,
    523,
    0,
    440,
    0,
    330,
    0,
    440,
    0,
    349,
    0,
    294,
    0,
    220,
    0,
    294,
    0,
    349,
    0,
    294,
    0,
    220,
    0,
    294,
    0,
    262,
    0,
    247,
    0,
    220,
    0,
    175,
    0,
    165,
    0,
    147,
    0,
    131,
    0,
    98,
    0,
]
drum_beats = [
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    500,
    -1,
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    500,
    -1,
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    500,
    -1,
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    500,
    -1,
    500,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    6000,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
]
hi_hat = [
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
    20000,
    -1,
]
bass_notes = [
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    50,
    -1,
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    50,
    -1,
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    50,
    -1,
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    50,
    -1,
    50,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    0,
]

# This section of code is only for testing.
if __name__ == "__main__":
    galacticUnicorn = GalacticUnicorn()
    graphics = PicoGraphics(display=DISPLAY)
    uasyncio.run(run(galacticUnicorn, graphics))
