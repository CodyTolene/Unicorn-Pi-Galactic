# Cody Tolene
# Apache License 2.0
#
# Contains code from here under the MIT License:
# https://github.com/pimoroni/pimoroni-pico/tree/main/micropython/examples/galactic_unicorn

import uasyncio
import math
from galactic import GalacticUnicorn, Channel
from utils.music import play_notes, volume


async def run(galacticUnicorn, graphics):
    width = galacticUnicorn.WIDTH
    # height = galacticUnicorn.HEIGHT

    hue_offset = 0.0
    stripe_width = 3.0
    speed = 1.0
    animate = True
    phase = 0

    hue_map = [from_hsv(x / width, 1.0, 1.0) for x in range(width)]

    # Define the music notes
    melody_notes = (
        147,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        175,
        0,
        196,
        0,
        220,
        0,
        262,
        0,
        247,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        175,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        175,
        0,
        196,
        0,
        220,
        0,
        262,
        0,
        330,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        349,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        349,
        0,
        330,
        0,
        294,
        0,
        220,
        0,
        262,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        247,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        247,
        0,
        220,
        0,
        196,
        0,
        147,
        0,
        175,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    )
    rhythm_notes = (
        294,
        0,
        440,
        0,
        587,
        0,
        440,
        0,
        294,
        0,
        440,
        0,
        587,
        0,
        440,
        0,
        294,
        0,
        440,
        0,
        587,
        0,
        440,
        0,
        294,
        0,
        440,
        0,
        587,
        0,
        440,
        0,
        294,
        0,
        440,
        0,
        587,
        0,
        440,
        0,
        294,
        0,
        440,
        0,
        587,
        0,
        440,
        0,
        392,
        0,
        523,
        0,
        659,
        0,
        523,
        0,
        392,
        0,
        523,
        0,
        659,
        0,
        523,
        0,
        698,
        0,
        587,
        0,
        440,
        0,
        587,
        0,
        698,
        0,
        587,
        0,
        440,
        0,
        587,
        0,
        523,
        0,
        440,
        0,
        330,
        0,
        440,
        0,
        523,
        0,
        440,
        0,
        330,
        0,
        440,
        0,
        349,
        0,
        294,
        0,
        220,
        0,
        294,
        0,
        349,
        0,
        294,
        0,
        220,
        0,
        294,
        0,
        262,
        0,
        247,
        0,
        220,
        0,
        175,
        0,
        165,
        0,
        147,
        0,
        131,
        0,
        98,
        0,
    )
    drum_beats = (
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        500,
        -1,
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        500,
        -1,
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        500,
        -1,
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        500,
        -1,
        500,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        6000,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
    )
    hi_hat = (
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
        20000,
        -1,
    )
    bass_notes = (
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        50,
        -1,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        50,
        -1,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        50,
        -1,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        50,
        -1,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        50,
        -1,
        50,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
    )
    musicNotes = [melody_notes, rhythm_notes, drum_beats, hi_hat, bass_notes]

    # Configure channels
    channels = [galacticUnicorn.synth_channel(i) for i in range(len(musicNotes))]
    channels[0].configure(
        waveforms=Channel.TRIANGLE + Channel.SQUARE,
        attack=0.016,
        decay=0.168,
        sustain=0xAFFF / 65535,
        release=0.168,
        volume=volume,
    )
    channels[1].configure(
        waveforms=Channel.SINE + Channel.SQUARE,
        attack=0.038,
        decay=0.300,
        sustain=0,
        release=0,
        volume=volume,
    )
    channels[2].configure(
        waveforms=Channel.NOISE,
        attack=0.005,
        decay=0.010,
        sustain=16000 / 65535,
        release=0.100,
        volume=volume,
    )
    channels[3].configure(
        waveforms=Channel.NOISE,
        attack=0.005,
        decay=0.005,
        sustain=8000 / 65535,
        release=0.040,
        volume=volume,
    )
    channels[4].configure(
        waveforms=Channel.SQUARE,
        attack=0.010,
        decay=0.100,
        sustain=0,
        release=0.500,
        volume=volume,
    )

    # Create and play music
    play_notes(galacticUnicorn, musicNotes, channels, bpm=700, repeat=True)

    while True:
        if animate:
            phase += speed

        draw(graphics, hue_map, hue_offset, phase, stripe_width, galacticUnicorn)

        # Handle button presses for view-specific controls
        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_VOLUME_UP):
            hue_offset += 0.01
            hue_offset = 1.0 if hue_offset > 1.0 else hue_offset

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_VOLUME_DOWN):
            hue_offset -= 0.01
            hue_offset = 0.0 if hue_offset < 0.0 else hue_offset

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_BRIGHTNESS_UP):
            galacticUnicorn.adjust_brightness(+0.01)

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_BRIGHTNESS_DOWN):
            galacticUnicorn.adjust_brightness(-0.01)

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_SLEEP):
            animate = False

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_A):
            speed += 0.05
            speed = 10.0 if speed > 10.0 else speed
            animate = True

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_B):
            speed -= 0.05
            speed = 0.0 if speed < 0.0 else speed
            animate = True

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_C):
            stripe_width += 0.05
            stripe_width = 10.0 if stripe_width > 10.0 else stripe_width

        if galacticUnicorn.is_pressed(GalacticUnicorn.SWITCH_D):
            stripe_width -= 0.05
            stripe_width = 1.0 if stripe_width < 1.0 else stripe_width

        await uasyncio.sleep(1.0 / 60)


def from_hsv(h, s, v):
    i = math.floor(h * 6.0)
    f = h * 6.0 - i
    v *= 255.0
    p = v * (1.0 - s)
    q = v * (1.0 - f * s)
    t = v * (1.0 - (1.0 - f) * s)

    i = int(i) % 6
    if i == 0:
        return int(v), int(t), int(p)
    if i == 1:
        return int(q), int(v), int(p)
    if i == 2:
        return int(p), int(v), int(t)
    if i == 3:
        return int(p), int(q), int(v)
    if i == 4:
        return int(t), int(p), int(v)
    if i == 5:
        return int(v), int(p), int(q)


def draw(graphics, hue_map, hue_offset, phase, stripe_width, galacticUnicorn):
    width = galacticUnicorn.WIDTH
    height = galacticUnicorn.HEIGHT
    phase_percent = phase / 15

    for x in range(width):
        colour = hue_map[int((x + (hue_offset * width)) % width)]
        for y in range(height):
            v = (math.sin((x + y) / stripe_width + phase_percent) + 1.5) / 2.5
            graphics.set_pen(
                graphics.create_pen(
                    int(colour[0] * v), int(colour[1] * v), int(colour[2] * v)
                )
            )
            graphics.pixel(x, y)

    galacticUnicorn.update(graphics)


# This section of code is only for testing.
if __name__ == "__main__":
    from picographics import PicoGraphics, DISPLAY_GALACTIC_UNICORN as DISPLAY

    galacticUnicorn = GalacticUnicorn()
    graphics = PicoGraphics(display=DISPLAY)
    uasyncio.run(run(galacticUnicorn, graphics))
